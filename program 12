#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 2

// Key matrix
int key[SIZE][SIZE] = {{9, 4}, {5, 7}};

// Function to convert a character to its numerical value
int char_to_num(char c) {
    if (isalpha(c)) {
        return toupper(c) - 'A';
    } else if (c == ' ') {
        return 26; // Represent space as 26
    }
    return -1; // Invalid character
}

// Function to encrypt a message using the Hill cipher
void encrypt(char message[]) {
    int len = strlen(message);
    int num_values[len]; // Array to store numerical values of characters in message

    // Convert message to numerical values
    for (int i = 0; i < len; i++) {
        num_values[i] = char_to_num(message[i]);
    }

    // Pad message if necessary
    if (len % SIZE != 0) {
        int pad_size = SIZE - (len % SIZE);
        for (int i = 0; i < pad_size; i++) {
            num_values[len++] = 26; // Pad with space
        }
    }

    // Encrypt message in blocks of SIZE
    for (int i = 0; i < len; i += SIZE) {
        int block[SIZE];
        for (int j = 0; j < SIZE; j++) {
            block[j] = num_values[i + j];
        }

        // Perform matrix multiplication
        int encrypted[SIZE] = {0};
        for (int j = 0; j < SIZE; j++) {
            for (int k = 0; k < SIZE; k++) {
                encrypted[j] += key[j][k] * block[k];
            }
            encrypted[j] %= 26; // Wrap values around if they exceed 26
        }

        // Print encrypted values as characters
        for (int j = 0; j < SIZE; j++) {
            printf("%c", (char)(encrypted[j] + 'A'));
        }
        printf(" ");
    }
    printf("\n");
}

int main() {
    char message[] = "meet me at the usual place at ten rather than eight oclock";
    encrypt(message);
    return 0;
}
